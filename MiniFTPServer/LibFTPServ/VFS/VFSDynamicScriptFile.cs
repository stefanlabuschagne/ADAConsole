using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Diagnostics;
using System.IO;

namespace LibFTPServ.VFS
{
    /// <summary>
    /// Creates a file which is generated by a dynamic script.
    /// </summary>
    public class VFSDynamicScriptFile : VFSVirtualFile
    {
        private string _source;
        private ScriptType _type;

        /// <summary>
        /// Creates a new instance of VFSDynamicScriptFile
        /// </summary>
        /// <param name="TargetName">The full path that will be visible in the VFS system</param>
        /// <param name="ScriptSource">The full path of the script source</param>
        /// <param name="t">Scrtipt type</param>
        public VFSDynamicScriptFile(string TargetName, string ScriptSource, ScriptType t)
            : base(TargetName)
        {
            _type = t;
            _source = ScriptSource;
        }

        /// <summary>
        /// Creates a new instance of VFSDynamicScriptFile
        /// </summary>
        /// <param name="TargetName">The full path that will be visible in the VFS system</param>
        /// <param name="ScriptSource">The full path of the script source on Local filesystem</param>
        /// <param name="t">Script type</param>
        /// <param name="time">File Last modification date</param>
        /// <param name="size">File size</param>
        public VFSDynamicScriptFile(string TargetName, string ScriptSource, ScriptType t, DateTime time, long size)
            : base(TargetName, time, size)
        {
            _type = t;
            _source = ScriptSource;
        }

        /// <summary>
        /// Renders the file
        /// </summary>
        /// <returns>The file as a stream</returns>
        public override Stream RenderContents()
        {
            Process p = new Process();
            p.StartInfo.UseShellExecute = false;
            p.StartInfo.WindowStyle = ProcessWindowStyle.Hidden;
            p.StartInfo.RedirectStandardOutput = true;
            p.StartInfo.CreateNoWindow = true;

            switch (_type)
            {
                case ScriptType.Php:
                    p.StartInfo.FileName = ParserPaths.PhpPath;
                    p.StartInfo.Arguments = _source;
                    break;
                case ScriptType.Python:
                    p.StartInfo.FileName = ParserPaths.PythonPath;
                    p.StartInfo.Arguments = _source;
                    break;
                case ScriptType.Ruby:
                    p.StartInfo.FileName = ParserPaths.RubyPath;
                    p.StartInfo.Arguments = _source;
                    break;
                case ScriptType.Standalone:
                    p.StartInfo.FileName = _source;
                    break;
            }
            p.Start();
            return p.StandardOutput.BaseStream;
        }
    }
}
